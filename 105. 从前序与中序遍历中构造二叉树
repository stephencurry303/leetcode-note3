from typing import List
#初始化树
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None
#给定一个前序遍历，一个中序遍历列表
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        pre_len = len(preorder)#长度
        in_len = len(inorder)#长度
        if pre_len != in_len:#如果数据长度不一样，异常
            raise Exception('数据输入错误')
        #调用函数
        root = self.__build_tree(preorder, 0, pre_len - 1, inorder, 0, in_len - 1)
        return root
    #函数，参数为（前序列表，左索引，右索引，中序遍历，左索引，右索引）
    def __build_tree(self, preorder, pre_left, pre_right, inorder, in_left, in_right):
        if pre_left > pre_right or in_left > in_right:
            return None

        pivot = preorder[pre_left]#初始化为前序遍历的左索引的值
        pivot_index = in_left#初始化为中序遍历的左索引
        while inorder[pivot_index] != pivot:#
            pivot_index += 1
        root = TreeNode(pivot)
        root.left = self.__build_tree(preorder, pre_left + 1, pre_left + pivot_index - in_left,
                                      inorder, in_left, pivot_index - 1)

        root.right = self.__build_tree(preorder, pre_left + pivot_index - in_left + 1, pre_right,
                                       inorder, pivot_index + 1, in_right)
        return root
